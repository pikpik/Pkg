#!/bin/sh

pkgsrc=/usr/pkgsrc

build () {
	(
		cd $pkgsrc/$1

		cleanpkgs

		bmake $2 2>&1 | tee build.log

		echo
		echo -e "\tA log is available $1/build.log."
		echo

		cleanpkgs
	)
}

cleanpkgs () {
	rm -rf $pkgsrc/work
}

installtools () {
	if ! which pkg_tarup 1>/dev/null 2>/dev/null
	then
		echo "Pkg_tarup not found; installing."
		echo
		build pkgtools/pkg_tarup bin-install
		echo
	fi
}

packagesLikeName () {
	available \
	| grep -i "/*$1"
}

packagesByName () {
	available \
	| grep -i "/$1$"
}

count () {
	wc -l \
	| sed 's/ //g' \
	| sed '/^ $/d'
}

suggestions () {
	echo 'Did you mean one of these?'

	echo

	package=$1 find
}

useOrSuggest () {
	next=$1
	package=$2

	if [ -f $pkgsrc/$package/DESCR ]
	then
		package=$package $next
	else
		matches=`packagesByName $package | count`
		similarities=`packagesLikeName $package | count`

		case "$matches" in
			"0")
				if [ $similarities = 0 ]
				then echo 'No matching packages.'
				else suggestions $package
				fi
			;;

			"1")
				package=`packagesByName $package`

				package=$package $next
			;;

			*)
				suggestions $package
			;;
		esac
	fi
}

install () {
	build $package bin-install
}

installed () {
	pkg_info -Q PKGPATH '*' \
	| sort
}

uninstall () {
	build $package deinstall
}

update () {
	installtools

	build $package replace
}

available () {
	echo $pkgsrc/*/* \
	| tr " " "\n" \
	| sed "s@^$pkgsrc/@@" \
	| sed '/^mk/d' \
	| sed '/^doc/d' \
	| sed '/^licenses/d' \
	| sed '/^bootstrap/d' \
	| sed '/^distfiles/d' \
	| sed '/^packages/d' \
	| sed '/Makefile$/d'
}

about () {
	cat $pkgsrc/$package/DESCR
}

find () {
	available \
	| grep -i $package
}

help () {
	echo -e "installed"
	echo -e "available"
	echo -e "find\t\tpackage"
	echo -e "install\t\tpackage"
	echo -e "uninstall\tpackage"
	echo -e "update\t\tpackage"
	echo -e "about\t\tpackage"
	echo -e "help"
}

options () {
	case $1 in
		installed)	installed			;;
		available)	available			;;
		install)	useOrSuggest $1 $2		;;
		uninstall)	useOrSuggest $1 $2		;;
		update)		useOrSuggest $1 $2		;;
		about)		useOrSuggest $1 $2		;;
		find)		package=$2 find			;;
		help|*)		help				;;
	esac
}

echo

installtools

options $@

echo